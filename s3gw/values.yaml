---
# Ingress configuration.
ingress:
  # 'enabled' will deploy an ingress resource to the cluster if set to `true`.
  enabled: true

# Use cert-manager
useCertManager: true
# cert-manager namespace
certManagerNamespace: cert-manager
# The name of the predefined TLS issuer to use (s3gw-issuer,
# s3gw-letsencrypt-issuer).
tlsIssuer: "s3gw-issuer"
# The email address you are planning to use for getting notifications
# about your certificates. Fill this if you are using the
# 's3gw-letsencrypt-issuer'.
email: "mail@example.com"

# When not using cert-manager you have to manually specify
# TLS certificate/key pairs for all the services.
# Specify values in Base64 encoded in one line.
tls:
  publicDomain:
    crt: ""
    key: ""
  privateDomain:
    crt: ""
    key: ""
  ui:
    publicDomain:
      crt: ""
      key: ""

# S3 user interface
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Note, the UI will not be able to access the RGW AdminOps API when
# using HTTPS and self-signed certificates because of CORS issues.
# To workaround that, please open the URL https://<HOSTNAME> in the
# browser and accept the SSL certificate before accessing the UI
# via https://<UI-HOSTNAME>.
# Check https://github.com/s3gw-tech/s3gw/issues/31 to get more
# information about the CORS issues.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ui:
  # 'enabled' will deploy the S3GW user interface if set to `true`.
  enabled: true
  # 'serviceName' is the service name of the S3GW user interface.
  serviceName: ""
  # 'publicDomain' is the public domain of the UI Service used by the Ingress.
  publicDomain: ""

  # --- Developer Options ---
  # imageName: "s3gw-tech/s3gw-ui"
  # imageTag: "v0.0.0"

# S3 Service
#
# 'serviceName' is the service name of S3GW.
serviceName: ""
# 'useExistingSecret' use an existing secret containing the S3 credentials
# for the default user
useExistingSecret: false
# 'defaultUserCredentialsSecret' the name of the secret containing
# the S3 Access Key and the S3 Secret Key for the default user.
defaultUserCredentialsSecret: ""
# 'accessKey' is the S3 Access Key; the value is used when
# `useExistingSecret: false`.
# Set this as the empty string to make the Chart to compute a random
# alphanumeric value.
accessKey: "test"
# 'secretKey' is the S3 Secret Key; the value is used when
# `useExistingSecret: false`.
# Set this as the empty string to make the Chart to compute a random
# alphanumeric value.
secretKey: "test"
# 'publicDomain' is the public domain of S3GW used by the Ingress
publicDomain: ""
# 'privateDomain' is the private domain of S3GW used inside the Kubernetes
# cluster
privateDomain: "svc.cluster.local"

# Backing storage.
# Name the storage class to use. If create is true, an opinionated storage class
# will be created. This assumes the Longhorn storage driver is installed.
#
# By specifying storageClass.name = "" and storageClass.create = false the chart
# uses the cluster's default storage class.
# This is the chart's default behavior.
#
storageSize: 10Gi
storageClass:
  name:
  create: false
# For testing only:
#  local: false
#  localPath: /var/lib/local-storage

# --- Developer Options ---
#
# Image settings:
# imageRegistry: "quay.io"
# imagePullPolicy: "Always"
# imageName: "s3gw/s3gw"
# imageTag: "v0.0.0"
# imageCredentials:
#   username: foo
#   password: bar
#   email: foobar@suse.com

# s3gw pod log level.
# Valid values are "none", "low", "medium", and "high".
# Higher values are more verbose.
logLevel: "none"

# --- Advanced Configuration ---

# radosgw's custom arguments for the s3gw pod
#
# With 'helm install/update' you can specify custom arguments
# for the radosgw process using the '--set' option:
#
# --set "rgwCustomArgs={--foo,bar,--color,green,--org,SUSE,--flag-param-foo}"
#
# The same effect could be obtained modifying rgwCustomArgs
# directly in the values.yaml:
#
# rgwCustomArgs:
#   - --foo
#   - bar
#   - --color
#   - green
#   - --org
#   - SUSE
#   - --flag-param-foo
#
rgwCustomArgs: []

# radosgw's custom environment variables for the s3gw pod
#
# With 'helm install/update' you can specify custom environment variables
# for the radosgw process using the '--set' option:
#
# --set "rgwCustomEnvs={ENV_1=ON,ENV_2=OFF,ENV_3}"
#
# The same effect could be obtained modifying rgwCustomEnvs
# directly in the values.yaml:
#
# rgwCustomEnvs:
#   - ENV_1=ON
#   - ENV_2=OFF
#   - ENV_3
#
rgwCustomEnvs: []

# --- Container Object Storage Interface (COSI) configuration ---
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: Be advised that COSI standard is currently in **alpha** state.
# The COSI implementation provided by s3gw is considered an experimental feature
# and changes to the COSI standard are expected in this phase.
# The s3gw team does not control the upstream development of COSI.
#
# Additional information on COSI can be found here:
# - https://github.com/kubernetes-sigs/container-object-storage-interface-spec
# - https://github.com/kubernetes/enhancements/blob/master/keps/sig-storage/1979-object-storage-support/README.md
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# If you are going to use COSI, ensure some resources are pre-deployed on the cluster:
#
#   1) COSI CRDs
#
#      To deploy COSI CRDs, run:
#      $ kubectl create -k github.com/kubernetes-sigs/container-object-storage-interface-api
#
#   2) COSI Controller
#
#      To deploy COSI Controller, run:
#      $ kubectl create -k github.com/kubernetes-sigs/container-object-storage-interface-controller
#
# COSI support is disabled by default in s3gw.
# To enable it, set cosi.enabled: true.
#
# Normally, you don't need to change the chart's defaults for the COSI related fields.
# However, the following fields can be customized:
#
#  - cosi.driver.imageName: it specifies a custom image name for the COSI driver.
#                           Default: s3gw-cosi-driver
#
#  - cosi.driver.imageTag: it specifies a custom image tag for the COSI driver.
#                          Default: the current chart version.
#
#  - cosi.driver.imageRegistry: it specifies a custom image registry for the COSI driver.
#                               Default: quay.io/s3gw
#
#  - cosi.driver.imagePullPolicy: it specifies the pull policy for the COSI driver.
#                                 Default: IfNotPresent
#
#  - cosi.driver.name: it specifies the name of the COSI driver.
#                      Default: {Release.Name}.{Release.Namespace}.objectstorage.k8s.io
#
#  - cosi.driver.endpoint: it specifies the S3 endpoint url used by the COSI driver.
#                          Default: {Release.Name}.{Release.Namespace}.{Values.privateDomain}
#
#  - cosi.sidecar.imageName: it specifies a custom image name for the COSI sidecar.
#                            Default: s3gw-cosi-sidecar
#
#  - cosi.sidecar.imageTag: it specifies a custom image tag for the COSI sidecar.
#                           Default: the current chart version.
#
#  - cosi.sidecar.imageRegistry: it specifies a custom image registry for the COSI sidecar.
#                                Default: quay.io/s3gw
#
#  - cosi.sidecar.imagePullPolicy: it specifies the pull policy for the COSI sidecar.
#                                  Default: IfNotPresent
#
#  - cosi.sidecar.logLevel: it specifies the log verbosity of the COSI sidecar.
#                           Higher values are more verbose.
#                           Default: 5
#
cosi:
  enabled: false

  driver:
    imageName:
    imageTag:
    imageRegistry:
    imagePullPolicy:
    name:
    endpoint:

  sidecar:
    imageName:
    imageTag:
    imageRegistry:
    imagePullPolicy:
    logLevel: "5"
